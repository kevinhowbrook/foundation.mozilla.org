import datetime
from http import HTTPStatus
import os

from django.core import management

from networkapi.wagtailpages.pagemodels.blog import blog_topic
from networkapi.wagtailpages.pagemodels.blog import blog as blog_models
from networkapi.wagtailpages.factory import blog as blog_factories
from networkapi.wagtailpages.factory import profiles as profile_factories
from networkapi.wagtailpages.tests import base as test_base


class TestBlogIndexSearch(test_base.WagtailpagesTestCase):
    @staticmethod
    def update_index():
        with open(os.devnull, 'w') as f:
            management.call_command('update_index', verbosity=0, stdout=f)

    @classmethod
    def setUpTestData(cls):
        super().setUpTestData()
        cls.blog_index = blog_factories.BlogIndexPageFactory(parent=cls.homepage)

        # Using a weird search query to avoid it being generated by faker.
        cls.search_term = "Aweirdsearchquery"

    def test_route_success(self):
        url = self.blog_index.get_url() + self.blog_index.reverse_subpage("search")

        response = self.client.get(path=url)

        self.assertEqual(response.status_code, HTTPStatus.OK)

    def test_no_query(self):
        """Default search page with no query shows latest 6 pages."""
        tz = datetime.timezone.utc
        blog_page_1 = blog_factories.BlogPageFactory(
            parent=self.blog_index,
            first_published_at=datetime.datetime(2020, 1, 1, tzinfo=tz),
        )
        blog_page_2 = blog_factories.BlogPageFactory(
            parent=self.blog_index,
            first_published_at=datetime.datetime(2020, 1, 2, tzinfo=tz),
        )
        blog_page_3 = blog_factories.BlogPageFactory(
            parent=self.blog_index,
            first_published_at=datetime.datetime(2020, 1, 3, tzinfo=tz),
        )
        blog_page_4 = blog_factories.BlogPageFactory(
            parent=self.blog_index,
            first_published_at=datetime.datetime(2020, 1, 4, tzinfo=tz),
        )
        blog_page_5 = blog_factories.BlogPageFactory(
            parent=self.blog_index,
            first_published_at=datetime.datetime(2020, 1, 5, tzinfo=tz),
        )
        blog_page_6 = blog_factories.BlogPageFactory(
            parent=self.blog_index,
            first_published_at=datetime.datetime(2020, 1, 6, tzinfo=tz),
        )
        blog_page_7 = blog_factories.BlogPageFactory(
            parent=self.blog_index,
            first_published_at=datetime.datetime(2020, 1, 7, tzinfo=tz),
        )
        url = self.blog_index.get_url() + self.blog_index.reverse_subpage("search")

        response = self.client.get(path=url)

        self.assertEqual(response.status_code, HTTPStatus.OK)
        entries = response.context['entries']
        self.assertIn(blog_page_7, entries)
        self.assertIn(blog_page_6, entries)
        self.assertIn(blog_page_5, entries)
        self.assertIn(blog_page_4, entries)
        self.assertIn(blog_page_3, entries)
        self.assertIn(blog_page_2, entries)
        self.assertNotIn(blog_page_1, entries)

    def test_title_match(self):
        match_post = blog_factories.BlogPageFactory(
            parent=self.blog_index,
            title=self.search_term
        )
        other_post = blog_factories.BlogPageFactory(parent=self.blog_index)

        results = self.blog_index.get_search_entries(query=self.search_term)

        self.assertIn(match_post, results)
        self.assertNotIn(other_post, results)

    def test_topic_match(self):
        topic = blog_topic.BlogPageTopic.objects.create(title=self.search_term)
        match_post = blog_factories.BlogPageFactory(parent=self.blog_index)
        match_post.topics.add(topic)
        match_post.save()
        self.assertIn(topic, match_post.topics.all())
        other_post = blog_factories.BlogPageFactory(parent=self.blog_index)

        results = self.blog_index.get_search_entries(query=self.search_term)

        self.assertIn(match_post, results)
        self.assertNotIn(other_post, results)

    def test_author_match(self):
        author_profile = profile_factories.ProfileFactory(name=self.search_term)
        match_post = blog_factories.BlogPageFactory(parent=self.blog_index)
        blog_models.BlogAuthors.objects.create(page=match_post, author=author_profile)
        self.assertEqual(match_post.authors.first().author, author_profile)
        other_post = blog_factories.BlogPageFactory(parent=self.blog_index)
        self.update_index()

        results = self.blog_index.get_search_entries(query=self.search_term)

        self.assertIn(match_post, results)
        self.assertNotIn(other_post, results)
